Test Report
report.html
Report generated on 05-Feb-2020 at 06:48:51 by pytest-html v2.0.1
Environment
Packages
{'pytest': '5.3.4', 'py': '1.8.1', 'pluggy': '0.13.1'}
Platform
Windows-10-10.0.18362-SP0
Plugins
{'reportlog': '0.1.0', 'csv': '2.0.2', 'excel': '1.2.3', 'html': '2.0.1', 'logger': '0.5.1', 'metadata': '1.8.0'}
Python
3.7.6
Summary
1 tests ran in 427.84 seconds.
(Un)check the boxes to filter the results.0 passed, 0 skipped, 1 failed, 0 errors, 0 expected failures, 0 unexpected passes
Results
Result
Test
Duration
Links
No results found. Try to check the filters
Failed
AutomationUITests/Tests/TEST_I009_INS_CLI_Site_Insert_Edit.py::CLI_Siteinsertedit::test_01_Site_Insert_Edit
418.25
self = <Tests.TEST_I009_INS_CLI_Site_Insert_Edit.CLI_Siteinsertedit testMethod=test_01_Site_Insert_Edit>
def test_01_Site_Insert_Edit(self):
driver=self.driver
driver.implicitly_wait(10)
# =====Login to SCC using CLI=====
a = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
f = open("text.txt", "w+")
start = time.time()
clientname="QA_AUTOMATION_Do_Not_Delete"
sitename_01 = ("Test_Site_add_another_" + a)
sitename_02=("Test_Site_save_and_close" + a)
sitename_03 = ("Test_Site_save_and_continue" + a)
username=("Test_user_"+a)
if (Config.env_name == "test"):
Login=INSlogin_Page_Cases(driver)
driver.get(Config.ins_test_url)
Login.Enter_userName(Config.ins_cli_username)
Login.Enter_password(Config.ins_cli_password)
Login.Login_buttonClick()
elif (Config.env_name == 'StageNext'):
Login = INSlogin_Page_Cases(driver)
driver.get(Config.ins_Stagenext_url)
Login.Enter_userName(Config.ins_cli_username)
Login.Enter_password(Config.ins_cli_password)
Login.Login_buttonClick()
elif (Config.env_name == 'Stage'):
Login = INSlogin_Page_Cases(driver)
driver.get(Config.ins_Stage_url)
Login.Enter_userName(Config.ins_cli_username)
Login.Enter_password(Config.ins_cli_password)
Login.Login_buttonClick()
# ===== Navigate to Site page =====
time.sleep(5)
driver.find_element_by_xpath("/html/body/div[2]/form/div[3]/div[1]/div[1]/ul/li[3]/a/span").click()
time.sleep(20)
addsite = Site_Insert_Edit_Page_Cases(driver)
addsite.Click_site_CLI_add()
time.sleep(10)
driver.switch_to.frame("RadPopupWindow")
driver.implicitly_wait(30)
addsite.Click_Save_and_Close()
actual_Validation_message= addsite.Validate_SitesValidation()
expected_Validation_msg = ['There were some validation problems.', 'The Site Type field is required.','The Site Name field is required.','The Site Phone field is required.','The Address 1 field is required.','The City field is required.','The State/Province field is required.','The Postal Code field is required.']
self.assertEqual(expected_Validation_msg, actual_Validation_message)
time.sleep(10)
# ===== Add new site using "Save and Add Another" =====
#driver.switch_to.frame("RadPopupWindow")
addsite.Select_site_type()
addsite.Enter_site_name(sitename_01)
addsite.Enter_site_phone("987654321")
addsite.Enter_address_01('Test_Address_01')
addsite.Enter_address_02("Test_Address_02")
addsite.Enter_city("Test_City")
addsite.Enter_State("Test_State")
addsite.Select_Country()
addsite.Enter_postal_code("654321")
addsite.Click_Save_and_Add_Another()
# ===== add site using "Save and Close" =====
addsite.Select_site_type()
addsite.Enter_site_name(sitename_02)
addsite.Enter_site_phone("987654321")
addsite.Enter_address_01('Test_Address_01')
addsite.Enter_address_02("Test_Address_02")
addsite.Enter_city("Test_City")
addsite.Enter_State("Test_State")
addsite.Select_Country()
addsite.Enter_postal_code("654321")
addsite.Click_Save_and_Close()
driver.switch_to.default_content()
# ===== verify the Added site name =====
verify = Site_Insert_Edit_Page_Cases(driver)
driver.implicitly_wait(30)
verify.Clear_Site_name()
verify.Enter_Site_name(sitename_01)
verify.Click_Site_Search_CLI()
actual_site_01=verify.Verify_Site_name01_cli()
self.assertEqual(sitename_01, actual_site_01 )
time.sleep(5)
verify.Clear_Site_name()
verify.Enter_Site_name(sitename_02)
verify.Click_Site_Search_CLI()
actual_site_02 = verify.Verify_Site_name01_cli()
self.assertEqual(sitename_02, actual_site_02)
time.sleep(5)
# ===== Add Site using "Save and Continue' =====
addsite.Click_site_CLI_add()
driver.switch_to.frame("RadPopupWindow")
addsite.Select_site_type()
addsite.Enter_site_name(sitename_03)
addsite.Enter_site_phone("987654321")
addsite.Enter_address_01('Test_Address_01')
addsite.Enter_address_02("Test_Address_02")
addsite.Enter_city("Test_City")
addsite.Enter_State("Test_State")
addsite.Select_Country()
addsite.Enter_postal_code("654321")
addsite.Click_Save_and_Continue()
# ===== Verify Site name =====
actual_Site_name = verify.Verify_Added_Site_CLI_name()
self.assertEqual(sitename_03, actual_Site_name)
time.sleep(2)
# ===== Verify links on the site edit page =====
# ===== Verify site details link on the page =====
actual_site_details_link = verify.Verify_site_details_link_CLI()
self.assertEqual(Config.Expected_site_details_link, actual_site_details_link)
time.sleep(2)
# ===== Verify site messages link on the page =====
actual_site_messages_link = verify.Verify_site_messages_link_CLI()
self.assertEqual(Config.Expected_site_messages_link, actual_site_messages_link)
time.sleep(2)
# ===== Verify add messages link on the page =====
actual_site_add_messages_link = verify.Verify_add_messages_link_CLI()
self.assertEqual(Config.Expected_site_add_messages_link, actual_site_add_messages_link)
time.sleep(5)
# ===== Edit the details on the site edit page =====
editsite=Site_Insert_Edit_Page_Cases(driver)
driver.implicitly_wait(25)
editsite.Edit_Site_types()
editsite.Edit_Site_name("Test_Site_save_and_continue20191126_161448")
editsite.Edit_Site_phone("987654321")
editsite.Edit_Site_address_01("Test_Address_01")
editsite.Edit_Site_address_02("Test_Address_02")
editsite.Edit_site_city("Test_City")
editsite.Edit_site_State("Test_State")
editsite.Edit_Site_country()
editsite.Edit_postal_code("654321")
editsite.Click_save()
# ==== Complete the site assessment =====
assessment=Site_Insert_Edit_Page_Cases(driver)
driver.implicitly_wait(30)
assessment.Edit_assessment()
assessment.Select_Are_GMO_Products()
time.sleep(8)
assessment.Select_Do_you_segrate()
time.sleep(8)
assessment.Enter_Rely_on_segration("Submitting site for assessment")
assessment.If_you_rely_flushing()
assessment.Upload_cleaning_procedure(Config.Upload_File_1)
assessment.Have_you_carried_out_GMO_risk()
assessment.Upload_copy_of_risk_assessment(Config.Upload_File_2)
assessment.Click_save_assessment()
assessment.Submit_for_Assessment()
# ====
Associate the product to site ====
addproduct = Site_Insert_Edit_Page_Cases(driver)
driver.implicitly_wait(30)
addproduct.Click_add_product()
driver.switch_to.frame("RadPopupWindow")>
addsite.Select_product()C:\AutomationUITests\Tests\TEST_I009_INS_CLI_Site_Insert_Edit.py:202: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ C:\AutomationUITests\Pages\CLI_Site_Insert_Edit_Page.py:309: in Select_product
self.driver.find_element_by_xpath(Site_Insert_Edit_Locators.Select_product_xpath).click()C:\Users\pip-rhiremath\AppData\Local\Programs\Python\Python37-32\lib\site-packages\selenium\webdriver\remote\webdriver.py:394: in find_element_by_xpath
return self.find_element(by=By.XPATH, value=xpath)C:\Users\pip-rhiremath\AppData\Local\Programs\Python\Python37-32\lib\site-packages\selenium\webdriver\remote\webdriver.py:978: in find_element
'value': value})['value']C:\Users\pip-rhiremath\AppData\Local\Programs\Python\Python37-32\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
self.error_handler.check_response(response)_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x012EAD90>response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x772A7B74+228]\\n\\tRtlGetAppContainerNamedObjectPath [0x772A7B44+180]\\n"}}'}
def check_response(self, response):
"""
Checks that a JSON response from the WebDriver does not have an error.
:Args:
- response - The JSON response from the WebDriver server as a dictionary
object.
:Raises: If the response contains an error message.
"""
status = response.get('status', None)
if status is None or status == ErrorCode.SUCCESS:
return
value = None
message = response.get("message", "")
screen = response.get("screen", "")
stacktrace = None
if isinstance(status, int):
value_json = response.get('value', None)
if value_json and isinstance(value_json, basestring):
import json
try:
value = json.loads(value_json)
if len(value.keys()) == 1:
value = value['value']
status = value.get('error', None)
if status is None:
status = value["status"]
message = value["value"]
if not isinstance(message, basestring):
value = message
message = message.get('message')
else:
message = value.get('message', None)
except ValueError:
pass
exception_class = ErrorInResponseException
if status in ErrorCode.NO_SUCH_ELEMENT:
exception_class = NoSuchElementException
elif status in ErrorCode.NO_SUCH_FRAME:
exception_class = NoSuchFrameException
elif status in ErrorCode.NO_SUCH_WINDOW:
exception_class = NoSuchWindowException
elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
exception_class = StaleElementReferenceException
elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
exception_class = ElementNotVisibleException
elif status in ErrorCode.INVALID_ELEMENT_STATE:
exception_class = InvalidElementStateException
elif status in ErrorCode.INVALID_SELECTOR \
or status in ErrorCode.INVALID_XPATH_SELECTOR \
or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
exception_class = InvalidSelectorException
elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
exception_class = ElementNotSelectableException
elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
exception_class = ElementNotInteractableException
elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
exception_class = InvalidCookieDomainException
elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
exception_class = UnableToSetCookieException
elif status in ErrorCode.TIMEOUT:
exception_class = TimeoutException
elif status in ErrorCode.SCRIPT_TIMEOUT:
exception_class = TimeoutException
elif status in ErrorCode.UNKNOWN_ERROR:
exception_class = WebDriverException
elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
exception_class = UnexpectedAlertPresentException
elif status in ErrorCode.NO_ALERT_OPEN:
exception_class = NoAlertPresentException
elif status in ErrorCode.IME_NOT_AVAILABLE:
exception_class = ImeNotAvailableException
elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
exception_class = ImeActivationFailedException
elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
exception_class = MoveTargetOutOfBoundsException
elif status in ErrorCode.JAVASCRIPT_ERROR:
exception_class = JavascriptException
elif status in ErrorCode.SESSION_NOT_CREATED:
exception_class = SessionNotCreatedException
elif status in ErrorCode.INVALID_ARGUMENT:
exception_class = InvalidArgumentException
elif status in ErrorCode.NO_SUCH_COOKIE:
exception_class = NoSuchCookieException
elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
exception_class = ScreenshotException
elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
exception_class = ElementClickInterceptedException
elif status in ErrorCode.INSECURE_CERTIFICATE:
exception_class = InsecureCertificateException
elif status in ErrorCode.INVALID_COORDINATES:
exception_class = InvalidCoordinatesException
elif status in ErrorCode.INVALID_SESSION_ID:
exception_class = InvalidSessionIdException
elif status in ErrorCode.UNKNOWN_METHOD:
exception_class = UnknownMethodException
else:
exception_class = WebDriverException
if value == '' or value is None:
value = response['value']
if isinstance(value, basestring):
if exception_class == ErrorInResponseException:
raise exception_class(response, value)
raise exception_class(value)
if message == "" and 'message' in value:
message = value['message']
screen = None
if 'screen' in value:
screen = value['screen']
stacktrace = None
if 'stackTrace' in value and value['stackTrace']:
stacktrace = []
try:
for frame in value['stackTrace']:
line = self._value_or_default(frame, 'lineNumber', '')
file = self._value_or_default(frame, 'fileName', '<anonymous>')
if line:
file = "%s:%s" % (file, line)
meth = self._value_or_default(frame, 'methodName', '<anonymous>')
if 'className' in frame:
meth = "%s.%s" % (frame['className'], meth)
msg = "
at %s (%s)"
msg = msg % (meth, file)
stacktrace.append(msg)
except TypeError:
pass
if exception_class == ErrorInResponseException:
raise exception_class(response, message)
elif exception_class == UnexpectedAlertPresentException:
alert_text = None
if 'data' in value:
alert_text = value['data'].get('text')
elif 'alert' in value:
alert_text = value['alert'].get('text')
raise exception_class(message, screen, stacktrace, alert_text)>
raise exception_class(message, screen, stacktrace)E
selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"/html/body/div[2]/div/form/div[6]/div[1]/div[1]/div/table/tbody/tr/td[1]/input"}E
(Session info: chrome=79.0.3945.130)C:\Users\pip-rhiremath\AppData\Local\Programs\Python\Python37-32\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: NoSuchElementException ------------------------------Captured stdout call------------------------------ ['There were some validation problems.', 'The Site Type field is required.', 'The Site Name field is required.', 'The Site Phone field is required.', 'The Address 1 field is required.', 'The City field is required.', 'The State/Province field is required.', 'The Postal Code field is required.']
Test_Site_add_another_20200205_064153
Test_Site_save_and_close20200205_064153
Test_Site_save_and_continue20200205_064153
Site Details
Site Messages
Add Site Message